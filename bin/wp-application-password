#!/usr/bin/env perl

use strict;
use warnings;
use File::Basename qw(dirname);
use Cwd qw(abs_path);
use IPC::Open3;
use Symbol 'gensym';
use Getopt::Long;

# UltraAB config loader and writer
use lib(dirname(abs_path(__FILE__)) . "/modules");
use UltraAB::Config qw(get_configuration save_configuration);

my $USER_ID = 1;
my $non_interactive = 0;
GetOptions(
    "non-interactive" => \$non_interactive,
);

# Load config
my %cfg = get_configuration();
my $site_name = $cfg{meta}{SITE_NAME} // die "SITE_NAME missing in config\n";

# Helper to run `bin/wp` and get output
sub run_wp {
    my @cmd = ('bin/wp', @_);
    my $stderr = gensym;
    my $pid = open3(undef, my $out, $stderr, @cmd);
    my @stdout = <$out>;
    my @stderr = <$stderr>;
    waitpid($pid, 0);
    my $rc = $? >> 8;
    return (\@stdout, \@stderr, $rc);
}

# Parse the WP CLI app password list output for the target site name (multiple rows)
sub parse_app_password_rows {
    my ($lines, $site_name) = @_;
    my @data_rows;

    foreach my $line (@$lines) {
        chomp $line;
        # Skip headers
        next if $line =~ /^exited/;
        next if $line =~ /^uuid\s+/;
        next if $line =~ /^\s*$/;

        # Match: uuid, optional app_id, name, password, created
        # Use greedy match for password to include all chars up to last whitespace
        if ($line =~ /^([a-f0-9\-]+)\s+\S*\s+$site_name\s+([^\s]+)\s+(\d+)\s*$/i) {
            my ($uuid, $password, $created) = ($1, $2, $3);
            push @data_rows, {
                uuid     => $uuid,
                name     => $site_name,
                password => $password,
                created  => $created,
            };
        }
    }

    return @data_rows;
}

# Step 1: List existing app passwords
my ($list_out, $list_err, $list_rc) = run_wp('user', 'application-password', 'list', $USER_ID, '--format=table');
die "Failed to run wp user application-password list: @$list_err" if $list_rc;

my @found = parse_app_password_rows($list_out, $site_name);

if (@found) {
    if ($non_interactive) {
        print "Application password for '$site_name' already exists. No changes made (non-interactive mode).\n";
        exit 0;
    }
    print "Found ".scalar(@found)." application password(s) for '$site_name':\n";
    print "UUIDs: " . join(", ", map { $_->{uuid} } @found) . "\n\n";
    print "Do you want to rotate (delete and create a new) application password for '$site_name'? [y/N]: ";
    my $answer = <STDIN>;
    chomp $answer;
    if (lc($answer) ne 'y') {
        print "No changes made. Your APPLICATION_SECRET is unchanged.\n";
        exit 0;
    }
    # Delete all app passwords for $site_name
    foreach my $pw (@found) {
        my $uuid = $pw->{uuid} or next;
        my ($del_out, $del_err, $del_rc) = run_wp('user', 'application-password', 'delete', $USER_ID, $uuid);
        die "Failed to delete application password: @$del_err" if $del_rc;
        print "Deleted old application password: $uuid\n";
    }
    # Create a new one
    my ($create_out, $create_err, $create_rc) = run_wp('user', 'application-password', 'create', $USER_ID, $site_name);
    die "Failed to create application password: @$create_err" if $create_rc;
    my ($pw_line) = grep { /^Password:/ } @$create_out;
    print $pw_line if defined $pw_line;  # This echoes the exact WP CLI output for operator verification
    my ($pw) = $pw_line =~ /^Password:\s*(\S+)/ if defined $pw_line;
    die "Could not extract new application password from output" unless $pw;
    $cfg{nginx}{APPLICATION_SECRET} = $pw;
    save_configuration(%cfg);
    print "✅ Created new application password for '$site_name'.\n";
    print "APPLICATION_SECRET: $pw\n";
    exit 0;
}

# No record exists; create one
print "No application password found for [$site_name], creating new...\n";
my ($create_out, $create_err, $create_rc) = run_wp('user', 'application-password', 'create', $USER_ID, $site_name);
die "Failed to create application password: @$create_err" if $create_rc;
my ($pw_line) = grep { /^Password:/ } @$create_out;
print $pw_line if defined $pw_line;  # operator can visually confirm
my ($pw) = $pw_line =~ /^Password:\s*(\S+)/ if defined $pw_line;
die "Could not extract new application password from output" unless $pw;
$cfg{nginx}{APPLICATION_SECRET} = $pw;
save_configuration(%cfg);
print "✅ Created new application password for '$site_name'.\n";
print "APPLICATION_SECRET: $pw\n";
exit 0;
