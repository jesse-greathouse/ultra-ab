# GET or PUT /api/test_results/:id
location ~ ^/api/test_results/([0-9]+)$ {
    default_type 'application/json';

    content_by_lua_block {
        local cjson = require "cjson.safe"
        local test_results = require "ab.service.test_results"

        local id = ngx.var.uri:match("/api/test_results/([0-9]+)")
        if not id then
            ngx.status = 400
            ngx.say(cjson.encode({ error = "id required" }))
            return
        end

        local method = ngx.req.get_method()

        if method == "GET" then
            local res, err = test_results.fetch_by_id(id)
            if err then
                if err == "not found" then
                    ngx.status = 404
                    ngx.say(cjson.encode({ error = "Test result not found" }))
                else
                    ngx.status = 500
                    ngx.say(cjson.encode({ error = "Internal Server Error" }))
                end
                return
            end

            ngx.status = 200
            ngx.say(cjson.encode(res or {}))
            return
        elseif method == "PUT" then
            ngx.req.read_body()
            local body = ngx.req.get_body_data()
            local params, err = cjson.decode(body or "")
            if not params then
                ngx.status = 400
                ngx.say(cjson.encode({ error = "Malformed JSON: endpoint only accepts valid JSON bodies" }))
                return
            end

            local errors = {}
            if not params or type(params) ~= "table" then
                errors.body = "Malformed JSON body"
            end
            if not params.sid or type(params.sid) ~= "string" then
                errors.sid = "sid is required"
            end
            if not params.bucket or not tostring(params.bucket):match("^[ABC]$") then
                errors.bucket = "bucket must be one of: A, B, C"
            end
            if not params.url or type(params.url) ~= "string" or #params.url < 1 then
                errors.url = "url is required"
            end

            if next(errors) then
                ngx.status = 400
                ngx.say(cjson.encode({ errors = errors }))
                return
            end

            local res, update_err = test_results.update_by_id(
                id,
                params.sid,
                params.bucket,
                params.url,
                params.did_convert
            )

            if update_err == "not found" then
                ngx.status = 404
                ngx.say(cjson.encode({ error = "Record not found" }))
                return
            elseif not res then
                ngx.status = 500
                ngx.say(cjson.encode({ error = "Internal Server Error" }))
                return
            end

            -- After successful update, fetch the record and return it
            local updated_record, fetch_err = test_results.fetch_by_id(id)
            if not updated_record then
                ngx.status = 500
                ngx.say(cjson.encode({ error = fetch_err or "Could not fetch updated record" }))
                return
            end
            ngx.status = 200
            ngx.say(cjson.encode(updated_record))
            return
        else
            ngx.status = 405
            ngx.say(cjson.encode({ error = "Method Not Allowed" }))
            return
        end
    }
}

# POST /api/test_results
location = /api/test_results {
    default_type 'application/json';

    content_by_lua_block {
        local cjson = require "cjson.safe"
        local test_results = require "ab.service.test_results"

        ngx.req.read_body()
        local body = ngx.req.get_body_data()
        local params, err = cjson.decode(body or "")
        if not params then
            ngx.status = 400
            ngx.say(cjson.encode({ error = "Malformed JSON: endpoint only accepts valid JSON bodies" }))
            return
        end

        local errors = {}
        if not params or type(params) ~= "table" then
            errors.body = "Malformed JSON body"
        end
        if not params or not params.sid or type(params.sid) ~= "string" then
            errors.sid = "sid is required"
        end
        if not params or not params.bucket or not tostring(params.bucket):match("^[ABC]$") then
            errors.bucket = "bucket must be one of: A, B, C"
        end
        if not params or not params.url or type(params.url) ~= "string" or #params.url < 1 then
            errors.url = "url is required"
        end

        if next(errors) then
            ngx.status = 400
            ngx.say(cjson.encode({ errors = errors }))
            return
        end

      local insert_id, create_err = test_results.create(
          params.sid, params.bucket, params.url, params.did_convert
      )

      if not insert_id then
          ngx.status = 500
          ngx.say(cjson.encode({ error = create_err or "Internal Server Error" }))
          return
      end

      ngx.status = 201
      ngx.say(cjson.encode({ id = insert_id }))
    }
}

# GET /api/test_results/:sid
location ~ ^/api/test_results/([A-Za-z0-9\-]+)$ {
    default_type 'application/json';

    content_by_lua_block {
        local cjson = require "cjson.safe"
        local test_results = require "ab.service.test_results"

        -- Extract sid from the regex match
        local sid = ngx.var.uri:match("/api/test_results/([A-Za-z0-9%-]+)")
        local rows = tonumber(ngx.var.arg_rows) or 20
        local offset = tonumber(ngx.var.arg_offset) or 0

        if not sid then
            ngx.status = 400
            ngx.say(cjson.encode({ error = "sid required" }))
            return
        end

        local res, err = test_results.fetch_by_sid(sid, rows, offset)
        if not res then
            ngx.status = 500
            ngx.say(cjson.encode({ error = "Internal Server Error" }))
            return
        end


        ngx.say(cjson.encode(res or {}))
    }
}

# GET /api/test_results/report
location = /api/test_results/report {
    default_type 'application/json';

    content_by_lua_block {
        local cjson = require "cjson.safe"
        local test_results = require "ab.service.test_results"

        local res, err = test_results.report()
        if not res then
            ngx.status = 500
            ngx.say(cjson.encode({ error = "Internal Server Error" }))
            return
        end


        ngx.say(cjson.encode(res or {}))
    }
}

# Proxy /api/wp/* -> /wp/v2/* with injected application password header
location ~ ^/api/wp/(.*)$ {
    set $backend "$scheme://$host:$server_port";
    proxy_pass $backend/wp-json/wp/v2/$1$is_args$args;
    proxy_set_header X-WP-Application-Password $APPLICATION_SECRET;
    default_type application/json;
}
